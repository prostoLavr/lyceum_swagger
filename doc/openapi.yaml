openapi: 3.0.2
info:
  title: Asynchronus Timetable API
  version: "0.0.1dev1"

  description: '<div><a href="https://github.com/prostoLavr/async_lyceum_api.git">Репозиторий проекта</a>
  
  <h2>Домены</h2>
  <p> У API есть две версии stable и dev, стабильная и нестабильная соответственно. Если ваше приложение находится на стадии разработки, рекомендуется использовать dev версию API. Stable: https://async-api.lava-land.ru Dev: https://test-async-api.lava-land.ru.</p>

<h2>Как работают запросы</h2>
<p>Чтобы получить данные из API, необходимо послать GET запрос, состоящий из двух частей: домен и URL-путь. Запись URL-пути всегда начинается с символа /. Также у нас принято не писать / в конце запроса. Например, https://test-async-api.lava-land.ru/school вернёт список всех школ. В данном примере URL-путь это /school. Далее для обозначения запроса вместо https://test-async-api.lava-land.ru/school будет использоваться /school. А также под терминами URL и адрес будет подразумеваться URL-путь. </p>

<p>Названия URL запросов выбираются на основе REST-API. Знать что это такое необязательно. Детальнее почитать об этом можно тут. Говоря коротко, это способ именования запросов, в котором используется следующая схема. /объект - чтобы получить список таких объектов. И /объект/уникальный_номер_объекта - чтобы получить объект с заданным в URL уникальным номером. В нашей системе принято завершать запрос объектом, а не уникальным номером. Например, вот корректный запрос /school/1/class - это список классов в школе, а вот некорректный /school/1, последний запрос работать не будет.</p>
<p>Данные в теле запроса (в разных системах встречаются названия body, data или text) передаются в формате JSON. Всегда тело запроса это словарь! Внутри словаря могут быть списки, строки, числа, булевы значения, но тело запроса должно быть словарём. </p>
<h2>Как пользоваться swagger</h2><p>Под этим описанием вы увидете список доступых серверов API. В зависимости от сервера, ответ на один и тот же запрос может отличаться. ВНИМАНИЕ используйте стабильную версию для проверки ТОЛЬКО GET запросов. На тестовой версии можете выполнять любые запросы. Чтобы выполнить запрос, откройте содержимое карточки запроса, кликнув на неё, далее нажмите "Try it out", введите поля запроса, если это необходимо, и кликните по "Execute". После выполения запроса ниже вы увидите команду, которая была запущена и под ней ответ от сервера. В ответе будут прописаны код (200 - удачный), JSON и заголовки. В разделе Responses не перепутайте ответ от сервера (Server response) с ответом сгенерированным swagger (Responses). Последний нужен, чтобы увидеть как ответ на запрос выглядит в общем виде.</p>'

servers:
  - url: https://async-api.lava-land.ru
    description: "Стабильная версия"
  - url: https://test-async-api.lava-land.ru
    description: "Тестовая версия"
  
paths:
  /school:
    get:
      description: "Получить список школ" 
      responses:
        "200":
          description: "Успешно" 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/School"

  /school{school_id}/class:
    get:
      description: "Список классов для школы"
      parameters:
          - in: path
            name: school_id
            required: true
            schema:
              type: integer
              minimum: 1
            description: The school ID
      responses:
        "200":
          description: "Успешно" 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolWithClasses'

  /school{school_id}/lesson:
    get:
      description: "Список уроков разбитый по классам для всей школы"
      parameters:
          - in: path
            name: school_id
            required: true
            schema:
              type: integer
              minimum: 1
            description: The school ID
      responses:
        "200":
          description: "Успешно" 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolWithClassesWithLessons'

  /class/{class_id}/lesson:
    get:
      description: Get all lessons in class
      parameters:
          - in: path
            name: class_id
            required: true
            schema:
              type: integer
              minimum: 1
            description: The school ID
      responses:
        "200":
          description: "Успешно" 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassWithLessons'
  
components:
  schemas:

    SchoolWithClasses:
      properties:
        school_id:
          type: integer
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class'

    SchoolWithClassesWithLessons:
      properties:
        school_id:
          type: integer
        classes:
          type: array
          items:
            $ref: '#/components/schemas/ClassWithLessons'

    ClassWithLessons:
      properties:
        class_id:
          type: integer
        number:
          type: integer
        letter:
          type: string
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/Lesson'
    Class:
      properties:
        class_id:
          type: integer
        number:
          type: integer
        letter:
          type: string
    Lesson:
      properties:
        name: 
          type: string
        weekday:
          type: integer
        week:
          type: integer
        start_hour:
          type: integer
        start_minute:
          type: integer 
        end_hour:
          type: integer
        end_minute:
          type: integer
        teacher_name:
          type: string
    School:
      properties:
        school_id:
          type: integer
        name:
          type: string
        address:
          type: string
        
